AWSTemplateFormatVersion: '2010-09-09'
Description: 'Full Stack CloudFormation'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    Default: first_instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,g3.8xlarge,r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  #UbuntuAMI:
  #  Description: Ubuntu Server minimal lts
  #  Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  #  Default: 'ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20211129'

  # CIDR of VPC
  NetworkCIDR:
    Description: CIDR of the new VPC
    Type: String
    Default: 10.0.0.0/16

  # AZ Name where subnet will be created
  AvailabilityZoneName:
    Description: CIDR of the new VPC
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  # CIDR of new subnet within this VPC
  SubnetCIDR:
    Description: CIDR of the new subnet within this VPC
    Type: String
    Default: 10.0.1.0/24 


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref NetworkCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # attaching the IGW to my VPC
  VPCToStackInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # create a custom route table for demo vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Add routes entries for public network through igw
  VPCRoutes:
    Type: AWS::EC2::Route    
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway    

  # NACL
  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC

  # Allow all Incoming TCP traffic
  InboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'false'  # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'

  InboundICMP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '1'  # ICMP
      RuleAction: allow
      Egress: 'false'  # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'

  OutboundICMP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '1'  # ICMP
      RuleAction: allow
      Egress: 'true'  # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'

  # Allow all Outgoing TCP traffic
  OutboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'true'  # this rule applies to egress traffic from the subnet
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'  # client will be using ephemeral port, using 80 or 22 here will not work
        To: '65535'


  # creating a public subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZoneName
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true

  # asscoiate subnet with our route table else by default it is asscoiated with main route table
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # associate subnet with NACL else by default it is asscoiated with main NACLs
  SubnetNaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNACL

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'General Access'
      SecurityGroupIngress:
        # allow http
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # any IP
        # allow https
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0 # any IP
        # allow ssh  
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # only for demo else use your IP or corporate gateway IP
        # security hole, but guarentees connection
        # TODO how do I connect in a safe way? upload config/docker and run code from init
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'

  # allow local traffic
  SGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: '-1'
      FromPort: '-1'
      ToPort: '-1'
      SourceSecurityGroupId: !Ref EC2SecurityGroup

  # instance no. 1
  EC2InstanceONE:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      #SecurityGroups: [!Ref EC2SecurityGroup]
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      AvailabilityZone: !Ref AvailabilityZoneName
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      ImageId: 'ami-04505e74c0741db8d'

  # instance no. 2
  EC2InstanceTWO:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      #SecurityGroups: [!Ref EC2SecurityGroup]
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      AvailabilityZone: !Ref AvailabilityZoneName
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      ImageId: 'ami-04505e74c0741db8d'


Outputs:
  InstanceONE:
    Value: !GetAtt [EC2InstanceONE, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance
  InstanceTWO:
    Value: !GetAtt [EC2InstanceTWO, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance
  VpcID:
    Description: ID of the newly created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID" # the name for cross referencing
  PublicSubnetID:
    Description: SubnetId of the public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-SUBNET"

